import React, { useState, useRef } from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createDrawerNavigator } from '@react-navigation/drawer';
import { TextInput, TouchableOpacity, FlatList, Alert, SafeAreaView, StatusBar } from 'react-native';
import LinearGradient from 'react-native-linear-gradient';

const Drawer = createDrawerNavigator();

// Shared state for contacts
let sharedContacts = [];

const NewContactScreen = ({ navigation, route }) => {
  const [name, setName] = useState('');
  const [phone, setPhone] = useState('');
  const [email, setEmail] = useState('');
  const [editingId, setEditingId] = useState(null);
  const [nameError, setNameError] = useState('');
  const [phoneError, setPhoneError] = useState('');
  const initialized = useRef(false);

  // Initialize form with contact data when editing
  React.useEffect(() => {
    if (route.params?.contact && !initialized.current) {
      const contact = route.params.contact;
      setName(contact.name);
      setPhone(contact.phone);
      setEmail(contact.email);
      setEditingId(contact.id);
      initialized.current = true;
    }
  }, [route.params?.contact]);

  // Reset form when route params change or component unmounts
  React.useEffect(() => {
    return () => {
      if (!route.params?.contact) {
        setName('');
        setPhone('');
        setEmail('');
        setEditingId(null);
        setNameError('');
        setPhoneError('');
      }
      initialized.current = false;
    };
  }, [route.params?.contact]);

  const validateName = () => {
    if (name.trim() === '') {
      setNameError('Name is required');
      return false;
    }
    if (!/^[a-zA-Z ]+$/.test(name.trim())) {
      setNameError('Name should contain only letters and spaces');
      return false;
    }
    setNameError('');
    return true;
  };

  const validatePhone = () => {
    const phoneRegex = /^[0-1 6-9]\d{9}$/; // Fixed the regex - removed the erroneous [0-1]
    
    if (phone.trim() === '') {
      setPhoneError('Phone number is required');
      return false;
    }

    const cleanedPhone = phone.replace(/[^\d]/g, '');
  
    if (cleanedPhone.length !== 10) {
      setPhoneError('Phone number must be exactly 10 digits');
      return false;
    }
    
    if (!phoneRegex.test(cleanedPhone)) {
      setPhoneError('Please enter a valid 10-digit Indian phone number starting with 6-9');
      return false;
    }
    
    if (cleanedPhone !== phone) {
      setPhone(cleanedPhone);
    }
    
    setPhoneError('');
    return true;
  };

  const addContact = () => {
    const isNameValid = validateName();
    const isPhoneValid = validatePhone();
    
    if (!isNameValid || !isPhoneValid) {
      return;
    }

    if (editingId) {
      // Update existing contact in shared state
      const updatedContact = { 
        id: editingId, 
        name: name.trim(), 
        phone: phone.trim(), 
        email: email.trim() 
      };
      
      sharedContacts = sharedContacts.map(contact => 
        contact.id === editingId ? updatedContact : contact
      );
      
      Alert.alert('Success', 'Contact updated successfully!');
      
      // Navigate back to saved contacts and trigger refresh
      navigation.navigate('Saved Contact', { 
        refresh: true, 
        updatedContact: updatedContact 
      });
      
      // Clear the form
      setName('');
      setPhone('');
      setEmail('');
      setEditingId(null);
    } else {
      // Add new contact to shared state
      const newContact = {
        id: Date.now().toString(),
        name: name.trim(),
        phone: phone.trim(),
        email: email.trim(),
      };
      
      sharedContacts.push(newContact);
      
      Alert.alert('Success', 'Contact added successfully!');
      
      // Clear form for new contact
      setName('');
      setPhone('');
      setEmail('');
      
      // Navigate to saved contacts
      navigation.navigate('Saved Contact', { 
        refresh: true, 
        newContact: newContact 
      });
    }
    
    setNameError('');
    setPhoneError('');
  };

  const cancelEdit = () => {
    setName('');
    setPhone('');
    setEmail('');
    setEditingId(null);
    setNameError('');
    setPhoneError('');
    navigation.goBack();
  };

  return (
    <LinearGradient
      colors={['#667eea', '#764ba2', '#f093fb']}
      style={styles.gradientContainer}
    >
      <SafeAreaView style={styles.container}>
        <StatusBar barStyle="light-content" backgroundColor="#667eea" />
        
        <Text style={styles.title}>
          {editingId ? '✏️ Edit Contact' : 'Create New Contact'}
        </Text>
      
        <View style={styles.form}>
          <TextInput
            style={[styles.input, nameError ? styles.inputError : null]}
            placeholder="Enter name *"
            value={name}
            onChangeText={(text) => {
              setName(text);
              if (nameError) validateName();
            }}
            onBlur={validateName}
            placeholderTextColor="#999"
          />
          {nameError ? <Text style={styles.errorText}>{nameError}</Text> : null}
          
          <TextInput
            style={[styles.input, phoneError ? styles.inputError : null]}
            placeholder="Enter phone number *"
            value={phone}
            onChangeText={(text) => {
              setPhone(text);
              if (phoneError) validatePhone();
            }}
            onBlur={validatePhone}
            keyboardType="phone-pad"
            maxLength={10}
            placeholderTextColor="#999"
          />
          {phoneError ? <Text style={styles.errorText}>{phoneError}</Text> : null}
          
          <TextInput
            style={styles.input}
            placeholder="Enter email (optional)"
            value={email}
            onChangeText={setEmail}
            keyboardType="email-address"
            placeholderTextColor="#999"
          />
          
          <View style={styles.formButtonContainer}>
            <TouchableOpacity 
              style={[styles.addButton, editingId ? styles.updateButton : null]} 
              onPress={addContact}
            >
              <Text style={styles.addButtonText}>
                {editingId ? 'Update Contact' : '➕ Save Contact'}
              </Text>
            </TouchableOpacity>
            
            {editingId && (
              <TouchableOpacity style={styles.cancelButton} onPress={cancelEdit}>
                <Text style={styles.cancelButtonText}>Cancel</Text>
              </TouchableOpacity>
            )}
          </View>
        </View>
      </SafeAreaView>
    </LinearGradient>
  );
};

const SavedContactsScreen = ({ navigation, route }) => {
  const [contacts, setContacts] = useState([]);
  const [refreshKey, setRefreshKey] = useState(0);

  // Update contacts from shared state
  React.useEffect(() => {
    if (route.params?.refresh) {
      setContacts([...sharedContacts]);
      setRefreshKey(prev => prev + 1);
      
      // Clear the refresh parameter
      navigation.setParams({ refresh: false });
    }
  }, [route.params?.refresh, navigation]);

  // Initialize contacts on first load
  React.useEffect(() => {
    setContacts([...sharedContacts]);
  }, []);

  const deleteContact = (id) => {
    Alert.alert(
      'Delete Contact',
      'Are you sure you want to delete this contact?',
      [
        { text: 'Cancel', style: 'cancel' },
        { 
          text: 'Delete', 
          style: 'destructive',
          onPress: () => {
            // Remove from shared state
            sharedContacts = sharedContacts.filter(contact => contact.id !== id);
            // Update local state
            setContacts(sharedContacts);
          }
        },
      ]
    );
  };

  const editContact = (contact) => {
    navigation.navigate('New Contact', { contact });
  };

  const renderContact = ({ item }) => (
    <LinearGradient
      colors={['rgba(255,255,255,0.9)', 'rgba(255,255,255,0.8)']}
      style={styles.contactItem}
    >
      <View style={styles.contactInfo}>
        <Text style={styles.contactName}>{item.name}</Text>
        <Text style={styles.contactPhone}>📞 {item.phone}</Text>
        {item.email ? <Text style={styles.contactEmail}>✉️ {item.email}</Text> : null}
      </View>
      <View style={styles.buttonContainer}>
        <TouchableOpacity
          style={styles.editButton}
          onPress={() => editContact(item)}
        >
          <Text style={styles.editButtonText}> Edit</Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={styles.deleteButton}
          onPress={() => deleteContact(item.id)}
        >
          <Text style={styles.deleteButtonText}> Delete</Text>
        </TouchableOpacity>
      </View>
    </LinearGradient>
  );

  return (
    <LinearGradient
      colors={['#667eea', '#764ba2', '#f093fb']}
      style={styles.gradientContainer}
    >
      <SafeAreaView style={styles.container}>
        <StatusBar barStyle="light-content" backgroundColor="#667eea" />
        
        <Text style={styles.title}>👥 Saved Contacts ({contacts.length})</Text>
        
        {contacts.length === 0 ? (
          <View style={styles.emptyContainer}>
            <Text style={styles.emptyText}>📝 No contacts yet</Text>
            <Text style={styles.emptySubText}>Add your first contact by tapping "Create New Contact"!</Text>
            <TouchableOpacity
              style={styles.addFirstContactButton}
              onPress={() => navigation.navigate('New Contact')}
            >
              <Text style={styles.addFirstContactButtonText}>➕ Add First Contact</Text>
            </TouchableOpacity>
          </View>
        ) : (
          <FlatList
            data={contacts}
            renderItem={renderContact}
            keyExtractor={(item) => item.id}
            contentContainerStyle={styles.listContent}
            extraData={refreshKey}
          />
        )}
      </SafeAreaView>
    </LinearGradient>
  );
};

const HomeScreen = ({ navigation }) => {
  const [contactCount, setContactCount] = useState(0);

  // Update contact count when screen is focused
  React.useEffect(() => {
    const unsubscribe = navigation.addListener('focus', () => {
      setContactCount(sharedContacts.length);
    });

    return unsubscribe;
  }, [navigation]);

  return (
    <LinearGradient
      colors={['#667eea', '#764ba2', '#f093fb']}
      style={styles.gradientContainer}
    >
      <SafeAreaView style={styles.container}>
        <Text style={styles.title}>📱 My Contacts</Text>
        <Text style={styles.subtitle}>Manage your contacts easily</Text>
        
        <View style={styles.statsContainer}>
          <Text style={styles.statsText}>Total Contacts: {contactCount}</Text>
        </View>
        
        <TouchableOpacity
          style={styles.navButton}
          onPress={() => navigation.navigate('New Contact')}
        >
          <Text style={styles.navButtonText}>➕ Create New Contact</Text>
        </TouchableOpacity>
        
        <TouchableOpacity
          style={styles.navButton}
          onPress={() => navigation.navigate('Saved Contact')}
        >
          <Text style={styles.navButtonText}>👥 View Saved Contacts</Text>
        </TouchableOpacity>
      </SafeAreaView>
    </LinearGradient>
  );
};

const App = () => {
  return (
    <NavigationContainer>
      <Drawer.Navigator
        screenOptions={{
          drawerStyle: {
            backgroundColor: '#e6e6e6',
            width: 240
          },
          drawerLabelStyle: {
            fontSize: 17,
            color: '#333'
          },
          headerStyle: {
            backgroundColor: '#6200EE'
          },
          headerTintColor: '#fff',
          headerTitleAlign: 'center'
        }}
      >
        <Drawer.Screen name="Home" component={HomeScreen} />
        <Drawer.Screen name="New Contact" component={NewContactScreen} />
        <Drawer.Screen name="Saved Contact" component={SavedContactsScreen} />
      </Drawer.Navigator>
    </NavigationContainer>
  );
};

const styles = StyleSheet.create({
  gradientContainer: {
    flex: 1,
  },
  container: {
    flex: 1,
    paddingHorizontal: 20,
    paddingTop: 20,
  },
  title: {
    fontSize: 32,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 20,
    marginTop: 20,
    color: 'white',
    textShadowColor: 'rgba(0, 0, 0, 0.3)',
    textShadowOffset: { width: 1, height: 1 },
    textShadowRadius: 3,
  },
  subtitle: {
    fontSize: 18,
    textAlign: 'center',
    marginBottom: 30,
    color: 'white',
    opacity: 0.9,
  },
  statsContainer: {
    backgroundColor: 'rgba(255, 255, 255, 0.7)',
    padding: 15,
    borderRadius: 20,
    marginBottom: 30,
    alignItems: 'center',
  },
  statsText: {
    color: 'black',
    fontSize: 18,
    fontWeight: 'bold',
  },
  navButton: {
    backgroundColor: 'rgba(255, 255, 255, 0.73)',
    padding: 18,
    borderRadius: 23,
    marginBottom: 15,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
  
  },
  navButtonText: {
    color: 'black',
    fontSize: 18,
    fontWeight: 'bold',
  },
  form: {
    backgroundColor: 'white',
    padding: 20,
    borderRadius: 15,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 8,
  },
  input: {
    marginVertical: 12,
    padding: 17,
    borderRadius: 10,
    borderWidth: 0,
    backgroundColor: '#f8f9fa',
    elevation: 2,
    fontSize: 16,
  },
  inputError: {
    borderColor: '#e74c3c',
    backgroundColor: '#fff9f9',
    borderWidth: 1,
  },
  errorText: {
    color: '#e74c3c',
    fontSize: 12,
    marginBottom: 10,
    marginTop: -5,
  },
  addButton: {
    backgroundColor: '#32cd32',
    padding: 15,
    borderRadius: 25,
    alignItems: 'center',
    marginTop: 10,
    flex: 1,
    marginRight: 5,
    elevation: 6,
    borderWidth: 1,
    borderColor: 'rgba(0,0,0,0.1)',
  },
  updateButton: {
    backgroundColor: '#27ae60',
  },
  addButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
    textShadowColor: 'rgba(0, 0, 0, 0.7)',
    textShadowOffset: { width: 1, height: 1 },
    textShadowRadius: 3,
  },
  formButtonContainer: {
    flexDirection: 'row',
    marginTop: 10,
  },
  cancelButton: {
    backgroundColor: '#e74c3c',
    padding: 15,
    borderRadius: 30,
    alignItems: 'center',
    flex: 1,
    marginLeft: 5,
    elevation: 6,
  },
  cancelButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  listContent: {
    paddingBottom: 20,
  },
  contactItem: {
    flexDirection: 'row',
    backgroundColor: 'white',
    padding: 15,
    marginBottom: 10,
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 3,
    elevation: 3,
    alignItems: 'center',
  },
  contactInfo: {
    flex: 1,
  },
  contactName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#2c3e50',
    marginBottom: 5,
  },
  contactPhone: {
    fontSize: 16,
    color: 'black',
    marginBottom: 3,
  },
  contactEmail: {
    fontSize: 14,
    color: '#95a5a6',
  },
  buttonContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  editButton: {
    backgroundColor: '#3498db',
    paddingHorizontal: 12,
    paddingVertical: 12,
    borderRadius: 8,
    marginRight: 8,
  },
  editButtonText: {
    fontSize: 17,
    color: 'white',
    fontWeight: 'bold',
  },
  deleteButton: {
    backgroundColor: '#e74c3c',
    paddingHorizontal: 12,
    paddingVertical: 12,
    borderRadius: 8,
  },
  deleteButtonText: {
    fontSize: 17,
    color: 'white',
    fontWeight: 'bold',
  },
  emptyContainer: {
    alignItems: 'center',
    marginTop: 100,
  },
  emptyText: {
    fontSize: 24,
    color: 'white',
    marginBottom: 10,
    fontWeight: 'bold',
  },
  emptySubText: {
    fontSize: 16,
    color: 'rgba(255,255,255,0.8)',
    fontStyle: 'italic',
    marginBottom: 30,
    textAlign: 'center',
  },
  addFirstContactButton: {
    backgroundColor: 'rgba(1, 182, 10, 0.84)',
    padding: 15,
    borderRadius: 30,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  addFirstContactButtonText: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
  },
});

export default App;
